#!/bin/bash
#
# Check health of a specified process or service that is defined in server directory
# Change config/config.json parameters to handle the behaviour of daemon

configFile=./config/config.json
serviceDirectory=./services
logDir=./logs
logFile="${logDir}"/supervisor.log

configParams=(serviceName checkInterval backOffNum restartAttemptsInterval)
files=(configFile serviceDirectory)

#######################################
# Create log directory and check  
# 	essential directories
# Globals:
#   logDir
# Arguments:
#   None
# Returns:
#   None
#######################################
function initialization {
	mkdir "${logDir}" 2>/dev/null
	for file in "${files[@]}"; do
		if [[ ! -f "${!file}" ]]; then
			log "${!file} does not exist --> Exit"
			exit
		fi
	done	
}

#######################################
# Fetch config parameters from 
# 	config/config.json
# Globals:
#   configParams
#   configFile
# Arguments:
#   None
# Returns:
#   None
#######################################
function fetchConfigs {
	log "|_Fetch configs"
	for param in ${configParams[@]}; do
		eval "${param}=$(jq .${param} ${configFile})"
		log "|__>${param} fetched as ${!param}"
	done
}

#######################################
# Logging 
# Globals:
#   logFile
# Arguments:
#   A Text
# Returns:
#   None
#######################################
function log {
	echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >> ${logFile}
}

#######################################
# Check whether the service is running 
# 	or not available 
# Globals:
#   serviceName
# Arguments:
#   None
# Returns:
#   None
#######################################
function isAlive {
	pgrep -x ${serviceName} >/dev/null
}

#######################################
# Start the process or service   
# Globals:
#   serviceName
#	serviceDirectory
# Arguments:
#   None
# Returns:
#   None
#######################################
function startService {
	nohup "${serviceDirectory}/${serviceName}" >/dev/null 2>&1 &
}

#######################################
# Attempt to start the process or service   
# Globals:
#   serviceName
#	serviceDirectory
#	backOffNum
#	restartAttemptsInterval
# Arguments:
#   None
# Returns:
#   None
#######################################
function startAttempt {
	log "|_Attempting start the service ${serviceName}"
	for try in $(seq 1 ${backOffNum}); do
		if ! isAlive; then
			log "|__>try ${try} of ${backOffNum} to start ${serviceName}"
			startService	
		else
			break
		fi
		sleep ${restartAttemptsInterval}
	done
	if [[ ${try} -eq ${backOffNum} ]] && ! isAlive;	then
		echo "backoff"
	else
		echo "continue"
	fi
}

#######################################
# Back off trying to start the process   
# Globals:
#   serviceName
#	backOffNum
# Arguments:
#   None
# Returns:
#   None
#######################################
function backOff {
	log "|__>After ${backOffNum} tries ${serviceName} could not be started --> BackOff and Exit"
	exit
}


#######################################
# Main function   
# Globals:
#   serviceName
#	checkInterval
# Arguments:
#   None
# Returns:
#   None
#######################################
function main {
	initialization
	fetchConfigs

	while true; do
		if ! isAlive; then
			log "${serviceName} is not alive --> Attempt to start"
			if [[ "$(startAttempt)" == "backoff" ]]; then
				backOff
			fi		
		else
			log "${serviceName} is alive --> Check again ${checkInterval} seconds later"
		fi
		sleep ${checkInterval}
	done
}

main




